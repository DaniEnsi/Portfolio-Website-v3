import "./chunk-S5KM4IGW.js";

// node_modules/vue-disqus/dist/vue-disqus.esm.js
var t = "Disqus shortname is required. (To resolve this, go to: https://ktquez.github.io/vue-disqus/setup.html#installation)";
var e = ["api_key", "author_s3", "category_id", "identifier", "integration", "language", "remote_auth_s3", "slug", "title", "url"];
var n = ["name", "button", "icon", "url", "logout", "width", "height"];
var i = ["afterRender", "onInit", "onIdentify", "beforeComment", "onNewComment", "onPaginate", "onReady", "preData", "preInit", "preReset"];
var s = function(t2) {
  return requestAnimationFrame(function() {
    return requestAnimationFrame(t2);
  });
};
function r(t2, e2, n2, i2, s2, r2, o2, a2, u2, d) {
  "boolean" != typeof o2 && (u2 = a2, a2 = o2, o2 = false);
  var c, h = "function" == typeof n2 ? n2.options : n2;
  if (t2 && t2.render && (h.render = t2.render, h.staticRenderFns = t2.staticRenderFns, h._compiled = true, s2 && (h.functional = true)), i2 && (h._scopeId = i2), r2 ? (c = function(t3) {
    (t3 = t3 || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext) || "undefined" == typeof __VUE_SSR_CONTEXT__ || (t3 = __VUE_SSR_CONTEXT__), e2 && e2.call(this, u2(t3)), t3 && t3._registeredComponents && t3._registeredComponents.add(r2);
  }, h._ssrRegister = c) : e2 && (c = o2 ? function(t3) {
    e2.call(this, d(t3, this.$root.$options.shadowRoot));
  } : function(t3) {
    e2.call(this, a2(t3));
  }), c)
    if (h.functional) {
      var f = h.render;
      h.render = function(t3, e3) {
        return c.call(e3), f(t3, e3);
      };
    } else {
      var l = h.beforeCreate;
      h.beforeCreate = l ? [].concat(l, c) : [c];
    }
  return n2;
}
var o = r({ render: function() {
  var t2 = this.$createElement;
  return (this._self._c || t2)("div", { staticStyle: { "min-height": "200px" }, attrs: { id: "disqus_thread" } });
}, staticRenderFns: [] }, void 0, { name: "Disqus", props: { shortname: String, pageConfig: { type: Object, validator: function(t2) {
  return Object.keys(t2).every(function(t3) {
    return e.includes(t3);
  });
} }, ssoConfig: { type: Object, validator: function(t2) {
  return Object.keys(t2).every(function(t3) {
    return n.includes(t3);
  });
} }, lang: { type: String, default: "en" }, lazy: { type: Boolean, default: true }, lazyConfig: { type: Object, default: function() {
  return { root: null, rootMargin: "300px", threshold: 0.5 };
} } }, data: function() {
  return { observer: null };
}, computed: { getShortname: function() {
  var e2 = this.shortname ? this.shortname : this.$disqus ? this.$disqus.shortname : null;
  if (!e2)
    throw new Error(t);
  return e2;
} }, watch: { lang: function() {
  this.reset();
} }, mounted: function() {
  if (this.lazy)
    return this.observerDisqus();
  this.init();
}, methods: { init: function() {
  var t2 = this;
  if (this.$disqus && (this.$disqus.reset = this.reset), window.DISQUS)
    return this.reset();
  var e2 = this.setBaseConfig;
  window.disqus_config = function() {
    e2(this);
  }, this.loadEmbedScript(), this.$route && this.$watch("$route.path", function() {
    return t2.reset();
  });
}, reset: function(t2) {
  void 0 === t2 && (t2 = window.DISQUS);
  var e2 = this.setBaseConfig;
  t2.reset({ reload: true, config: function() {
    e2(this);
  } });
}, observerDisqus: function() {
  if ("IntersectionObserver" in window)
    return this.observer = new IntersectionObserver(this.handleObserver, this.lazyConfig), this.observer.observe(this.$el);
  this.init();
}, handleObserver: function(t2) {
  var e2 = this;
  t2.forEach(function(t3) {
    t3.isIntersecting && (e2.observer.disconnect(), e2.init());
  });
}, loadEmbedScript: function() {
  var t2 = document, e2 = t2.createElement("script");
  e2.setAttribute("id", "embed-disqus"), e2.setAttribute("data-timestamp", +new Date()), e2.type = "text/javascript", e2.async = true, e2.src = "//" + this.getShortname + ".disqus.com/embed.js", (t2.head || t2.body).appendChild(e2);
}, setBaseConfig: function(t2) {
  this.setPageConfig(t2), this.cbDisqus(t2), this.ssoConfig && Object.keys(this.ssoConfig).length && Object.assign(t2.sso, this.ssoConfig), t2.language = this.lang;
}, setPageConfig: function(t2) {
  var e2 = { url: document.baseURI, identifier: this.$route ? this.$route.path : window.location.pathname };
  Object.assign(t2.page, e2), this.pageConfig && Object.keys(this.pageConfig).length && Object.assign(t2.page, this.pageConfig);
}, cbDisqus: function(t2) {
  var e2 = this;
  i.forEach(function(n2) {
    t2.callbacks[n2] = [function(t3) {
      e2.$emit(n2.replace(/([a-z0-9])([A-Z])/g, "$1-$2").toLowerCase().replace("on-", ""), t3);
    }];
  });
} } }, void 0, false, void 0, false, void 0, void 0, void 0);
var a = r({ render: function() {
  var t2 = this.$createElement;
  return (this._self._c || t2)(this.tag, { tag: "component", staticClass: "disqus-comment-count", attrs: { href: this.getHref, "data-disqus-url": this.getUrl, "data-disqus-identifier": this.identifier } });
}, staticRenderFns: [] }, void 0, { name: "DisqusCount", inheritAttrs: false, props: { url: String, shortname: String, identifier: { type: String, required: true }, tag: { type: String, default: "span" } }, mounted: function() {
  this.init();
}, computed: { getHref: function() {
  return "a" === this.tag ? this.url + "#disqus_thread" : null;
}, getUrl: function() {
  return "span" === this.tag ? this.url : null;
}, getShortname: function() {
  var e2 = this.shortname ? this.shortname : this.$disqus ? this.$disqus.shortname : null;
  if (!e2)
    throw new Error(t);
  return e2;
} }, methods: { init: function() {
  var t2 = this;
  if ("DISQUSWIDGETS" in window)
    return s(function() {
      return t2.reset();
    });
  this.loadCountScript(), this.$route && this.$watch("$route.path", function() {
    return s(function() {
      return t2.reset();
    });
  });
}, reset: function(t2) {
  void 0 === t2 && (t2 = window.DISQUSWIDGETS), t2.getCount({ reset: true });
}, loadCountScript: function() {
  if (!document.getElementById("dsq-count-scr")) {
    var t2 = document, e2 = t2.createElement("script");
    e2.async = true, e2.id = "dsq-count-scr", e2.src = "//" + this.getShortname + ".disqus.com/count.js", (t2.head || t2.body).appendChild(e2);
  }
} } }, void 0, false, void 0, false, void 0, void 0, void 0);
function u(t2, e2) {
  void 0 === e2 && (e2 = {}), t2.component("Disqus", o), t2.component("DisqusCount", a), t2.prototype.$disqus = { shortname: e2.shortname || null, reset: null };
}
"undefined" != typeof window && void 0 !== window.Vue && window.Vue.use(u);
var vue_disqus_esm_default = u;

// dep:vue-disqus
var vue_disqus_default = vue_disqus_esm_default;
export {
  o as Disqus,
  a as DisqusCount,
  vue_disqus_default as default
};
//# sourceMappingURL=vue-disqus.js.map
