{
  "version": 3,
  "sources": ["../../../../@eggsydev/vue-lanyard/src/constants.js", "../../../../@eggsydev/vue-lanyard/src/functions/lanyard.js", "../../../../@eggsydev/vue-lanyard/src/index.js", "dep:@eggsydev_vue-lanyard"],
  "sourcesContent": ["module.exports = {\n  apiBase: \"https://api.lanyard.rest/v1\",\n  webSocketBase: \"wss://api.lanyard.rest/socket\",\n};\n", "// Constants\nconst { apiBase, webSocketBase } = require(\"../constants\");\n\n/**\n * Plugin that lets you interact with Lanyard API using fetch or WebSocket.\n * @param {{userId: string; socket?: boolean}} options\n * @returns {Promise<WebSocket> | Promise<object> | Promise<void>}\n */\nexport default async function Lanyard(options) {\n  const supportsWebSocket = \"WebSocket\" in window || \"MozWebSocket\" in window;\n\n  if (options.socket === true && supportsWebSocket === false)\n    throw new Error(\"Browser doesn't support WebSocket connections.\");\n\n  // Throw error if no options are set.\n  if (!options || Object.keys(options).length === 0)\n    throw new Error(\"No options were provided.\");\n  // Throw error if userId is missing.\n  else if (options.userId === undefined)\n    throw new Error(\"Missing `userId` option.\");\n  // Use websocket if socket option is set to true.\n  else if (options.socket === true) {\n    const socket = new WebSocket(webSocketBase);\n\n    let key = \"subscribe_to_id\";\n    if (typeof options.userId === \"object\") key = \"subscribe_to_ids\";\n\n    socket.addEventListener(\"open\", () => {\n      // Subscribe to ID(s)\n      socket.send(\n        JSON.stringify({\n          op: 2,\n          d: {\n            [key]: options.userId,\n          },\n        })\n      );\n\n      // Send heartbeat every 30 seconds\n      setInterval(() => {\n        socket.send(\n          JSON.stringify({\n            op: 3,\n          })\n        );\n      }, 30000);\n    });\n\n    return socket;\n  }\n  // Send a single request if userId is a string\n  else if (typeof options.userId === \"string\") {\n    const data = await fetch(`${apiBase}/users/${options.userId}`).then((res) =>\n      res.json()\n    );\n\n    return data;\n  }\n  // Send multiple request if userId is a string\n  else if (typeof options.userId === \"object\") {\n    const responseArray = [];\n\n    for (let user of options.userId) {\n      const data = await fetch(`${apiBase}/users/${user}`).then((res) =>\n        res.json()\n      );\n\n      responseArray.push(data);\n    }\n\n    return responseArray;\n  }\n}\n", "import Lanyard from \"./functions/lanyard.js\";\n\nexport default {\n  /**\n   * Method that will be called by Vue.use() to inject the plugin into context.\n   */\n  install(Vue) {\n    Vue.lanyard = Lanyard;\n    Vue.prototype.$lanyard = Lanyard;\n  },\n};\n", "import d from \"./node_modules/@eggsydev/vue-lanyard/src/index.js\";export default d;"],
  "mappings": ";;;;;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA,MACf,SAAS;AAAA,MACT,eAAe;AAAA,IACjB;AAAA;AAAA;;;ACFA,IAAM,EAAE,SAAS,cAAc,IAAI;AAOnC,eAAO,QAA+B,SAAS;AAC7C,QAAM,oBAAoB,eAAe,UAAU,kBAAkB;AAErE,MAAI,QAAQ,WAAW,QAAQ,sBAAsB;AACnD,UAAM,IAAI,MAAM,gDAAgD;AAGlE,MAAI,CAAC,WAAW,OAAO,KAAK,OAAO,EAAE,WAAW;AAC9C,UAAM,IAAI,MAAM,2BAA2B;AAAA,WAEpC,QAAQ,WAAW;AAC1B,UAAM,IAAI,MAAM,0BAA0B;AAAA,WAEnC,QAAQ,WAAW,MAAM;AAChC,UAAM,SAAS,IAAI,UAAU,aAAa;AAE1C,QAAI,MAAM;AACV,QAAI,OAAO,QAAQ,WAAW;AAAU,YAAM;AAE9C,WAAO,iBAAiB,QAAQ,MAAM;AAEpC,aAAO;AAAA,QACL,KAAK,UAAU;AAAA,UACb,IAAI;AAAA,UACJ,GAAG;AAAA,YACD,CAAC,MAAM,QAAQ;AAAA,UACjB;AAAA,QACF,CAAC;AAAA,MACH;AAGA,kBAAY,MAAM;AAChB,eAAO;AAAA,UACL,KAAK,UAAU;AAAA,YACb,IAAI;AAAA,UACN,CAAC;AAAA,QACH;AAAA,MACF,GAAG,GAAK;AAAA,IACV,CAAC;AAED,WAAO;AAAA,EACT,WAES,OAAO,QAAQ,WAAW,UAAU;AAC3C,UAAM,OAAO,MAAM,MAAM,GAAG,iBAAiB,QAAQ,QAAQ,EAAE;AAAA,MAAK,CAAC,QACnE,IAAI,KAAK;AAAA,IACX;AAEA,WAAO;AAAA,EACT,WAES,OAAO,QAAQ,WAAW,UAAU;AAC3C,UAAM,gBAAgB,CAAC;AAEvB,aAAS,QAAQ,QAAQ,QAAQ;AAC/B,YAAM,OAAO,MAAM,MAAM,GAAG,iBAAiB,MAAM,EAAE;AAAA,QAAK,CAAC,QACzD,IAAI,KAAK;AAAA,MACX;AAEA,oBAAc,KAAK,IAAI;AAAA,IACzB;AAEA,WAAO;AAAA,EACT;AACF;;;ACtEA,IAAO,cAAQ;AAAA,EAIb,QAAQ,KAAK;AACX,QAAI,UAAU;AACd,QAAI,UAAU,WAAW;AAAA,EAC3B;AACF;;;ACVkE,IAAO,+BAAQ;",
  "names": []
}
