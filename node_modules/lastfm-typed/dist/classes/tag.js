"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = __importDefault(require("../base"));
const caster_1 = require("../caster");
class TagClass extends base_1.default {
    async getInfo(firstInput, params) {
        firstInput = (0, caster_1.convertString)(firstInput, "tag", params !== null && params !== void 0 ? params : {});
        return (await this.sendRequest({ method: "tag.getInfo", ...firstInput, ...params })).tag;
    }
    async getTopAlbums(firstInput, params) {
        firstInput = (0, caster_1.convertString)(firstInput, "tag", params !== null && params !== void 0 ? params : {});
        let res = (await this.getTop("tag.getTopAlbums", firstInput, params)).albums;
        return (0, caster_1.convertExtendedMeta)(res, "album");
    }
    async getTopArtists(firstInput, params) {
        firstInput = (0, caster_1.convertString)(firstInput, "tag", params !== null && params !== void 0 ? params : {});
        let res = (await this.getTop("tag.getTopArtists", firstInput, params)).topartists;
        return (0, caster_1.convertExtendedMeta)(res, "artist");
    }
    async getTopTags(params) {
        //set arguments in a way consistent with other endpoints
        const newParams = this.convertNumRes(params);
        let res = (await this.getTop("tag.getTopTags", {}, newParams)).toptags;
        const total = (0, caster_1.toInt)(res["@attr"].total);
        if (total === null) {
            throw "Total is not a number";
        }
        let attr = {
            total,
            page: ((newParams.offset / newParams.num_res) + 1),
            perPage: newParams.num_res,
            totalPages: Math.ceil(total) / newParams.num_res
        };
        res.meta = attr;
        delete res["@attr"];
        res.tags = (0, caster_1.convertEntryArray)(res.tag);
        delete res.tag;
        return res;
    }
    async getTopTracks(firstInput, params) {
        firstInput = (0, caster_1.convertString)(firstInput, "tag", params !== null && params !== void 0 ? params : {});
        let res = (await this.getTop("tag.getTopTracks", firstInput, params)).tracks;
        return (0, caster_1.convertExtendedMeta)(res, "track");
    }
    async getTop(method, firstInput, params) {
        var _a, _b;
        this.checkLimit(((_a = params === null || params === void 0 ? void 0 : params.limit) !== null && _a !== void 0 ? _a : firstInput === null || firstInput === void 0 ? void 0 : firstInput.limit) || ((_b = params === null || params === void 0 ? void 0 : params.num_res) !== null && _b !== void 0 ? _b : firstInput === null || firstInput === void 0 ? void 0 : firstInput.num_res), 1000);
        return await this.sendRequest({ method, ...firstInput, ...params });
    }
}
exports.default = TagClass;
//# sourceMappingURL=tag.js.map