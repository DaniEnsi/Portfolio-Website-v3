"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = __importDefault(require("../base"));
const caster_1 = require("../caster");
class UserClass extends base_1.default {
    async getFriends(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getFriends", ...firstInput, ...params })).friends;
        res.users = (0, caster_1.toArray)(res.user).map((e) => {
            e = (0, caster_1.setDate)(e, "registered");
            e = (0, caster_1.convertEntry)(e);
            return e;
        });
        delete res.user;
        res.meta = (0, caster_1.convertMeta)(res["@attr"]);
        delete res["@attr"];
        return res;
    }
    async getInfo(firstInput, params) {
        firstInput = (0, caster_1.convertString)(firstInput, "user", {});
        let res = (await this.sendRequest({ method: "user.getInfo", ...firstInput, ...params })).user;
        res.registered = (0, caster_1.toInt)(res.registered.unixtime);
        res = (0, caster_1.convertEntry)(res);
        return res;
    }
    async getLovedTracks(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getLovedTracks", ...firstInput, ...params })).lovedtracks;
        res.meta = (0, caster_1.convertMeta)(res["@attr"]);
        delete res["@attr"];
        res.tracks = (0, caster_1.toArray)(res.track).map((e) => {
            e = (0, caster_1.setDate)(e, "date");
            e = (0, caster_1.convertEntry)(e);
            return e;
        });
        delete res.track;
        return res;
    }
    async getPersonalTags(firstInput, tag, taggingType, params) {
        var _a;
        this.checkLimit((_a = params === null || params === void 0 ? void 0 : params.limit) !== null && _a !== void 0 ? _a : firstInput === null || firstInput === void 0 ? void 0 : firstInput.limit, 1000);
        firstInput = (0, caster_1.convertString)(firstInput, "user", { tag, taggingType });
        let res = (await this.sendRequest({ method: "user.getPersonalTags", ...firstInput, ...params })).taggings;
        if (res.hasOwnProperty("artists")) {
            res.artists = (0, caster_1.convertEntryArray)(res.artists.artist);
        }
        else if (res.hasOwnProperty("albums")) {
            res.albums = (0, caster_1.convertEntryArray)(res.albums.album);
        }
        else if (res.hasOwnProperty("tracks")) {
            res.tracks = (0, caster_1.convertEntryArray)(res.tracks.track);
        }
        res.meta = (0, caster_1.convertMeta)(res["@attr"]);
        delete res["@attr"];
        return res;
    }
    async getRecentTracks(firstInput, params) {
        var _a;
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        if (params === null || params === void 0 ? void 0 : params.hasOwnProperty("extended")) {
            params.extended = (_a = (0, caster_1.toInt)(params.extended)) !== null && _a !== void 0 ? _a : 0;
        }
        else if (firstInput === null || firstInput === void 0 ? void 0 : firstInput.hasOwnProperty("extended")) {
            firstInput.extended = (0, caster_1.toInt)(firstInput.extended);
        }
        let res = (await this.sendRequest({ method: "user.getRecentTracks", ...firstInput, ...params })).recenttracks;
        res.meta = (0, caster_1.convertMeta)(res["@attr"]);
        delete res["@attr"];
        res.tracks = (0, caster_1.convertGetRecentTracks)(res.track);
        delete res.track;
        return res;
    }
    async getTopAlbums(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getTopAlbums", ...firstInput, ...params })).topalbums;
        return (0, caster_1.convertExtendedMeta)(res, "album");
    }
    async getTopArtists(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getTopArtists", ...firstInput, ...params })).topartists;
        return (0, caster_1.convertExtendedMeta)(res, "artist");
    }
    async getTopTags(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getTopTags", ...firstInput, ...params })).toptags;
        return (0, caster_1.convertExtendedMeta)(res, "tag");
    }
    async getTopTracks(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getTopTracks", ...firstInput, ...params })).toptracks;
        return (0, caster_1.convertExtendedMeta)(res, "track");
    }
    async getWeeklyAlbumChart(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getWeeklyAlbumChart", ...firstInput, ...params })).weeklyalbumchart;
        res.meta = (0, caster_1.convertMeta)(res["@attr"]);
        delete res["@attr"];
        res.albums = (0, caster_1.toArray)(res.album).map((e) => {
            e.artist.name = e.artist["#text"];
            delete e.artist["#text"];
            e = (0, caster_1.convertEntry)(e);
            return e;
        });
        delete res.album;
        return res;
    }
    async getWeeklyArtistChart(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getWeeklyArtistChart", ...firstInput, ...params })).weeklyartistchart;
        return (0, caster_1.convertExtendedMeta)(res, "artist");
    }
    async getWeeklyChartList(input) {
        let res = (await this.sendRequest({ method: "user.getWeeklyChartList" })).weeklychartlist;
        res.charts = (0, caster_1.toArray)(res.chart).map(caster_1.convertMeta);
        delete res.chart;
        return res;
    }
    async getWeeklyTrackChart(firstInput, params) {
        firstInput = this.checkLimitAndConvertString(firstInput, params);
        let res = (await this.sendRequest({ method: "user.getWeeklyTrackChart", ...firstInput, ...params })).weeklytrackchart;
        res.meta = (0, caster_1.convertMeta)(res["@attr"]);
        delete res["@attr"];
        res.tracks = (0, caster_1.toArray)(res.track).map((e) => {
            e.artist.name = e.artist["#text"];
            delete e.artist["#text"];
            e = (0, caster_1.convertEntry)(e);
            return e;
        });
        delete res.track;
        return res;
    }
    checkLimitAndConvertString(firstInput, params) {
        var _a;
        this.checkLimit((_a = params === null || params === void 0 ? void 0 : params.limit) !== null && _a !== void 0 ? _a : firstInput === null || firstInput === void 0 ? void 0 : firstInput.limit, 1000);
        return (0, caster_1.convertString)(firstInput, "user", {});
    }
}
exports.default = UserClass;
//# sourceMappingURL=user.js.map