"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertString = exports.addConditionals = exports.convertExtendedMeta = exports.convertBasicMetaTag = exports.joinArray = exports.convertGetRecentTracks = exports.setDate = exports.convertEntryArray = exports.convertEntry = exports.convertImageArray = exports.convertImage = exports.convertSearchWithQuery = exports.convertSearch = exports.convertMeta = exports.toArray = exports.toBool = exports.boolToInt = exports.toInt = void 0;
function toInt(num) {
    if (typeof num === "number") {
        return num;
    }
    const res = parseInt(num, 10);
    return isNaN(res) ? null : res;
}
exports.toInt = toInt;
const boolToInt = (bool) => Number(bool);
exports.boolToInt = boolToInt;
const toBool = (bool) => bool !== 0 && bool && bool !== "0";
exports.toBool = toBool;
function toArray(arr) {
    if (arr instanceof Array) {
        return arr;
    }
    if (!arr) {
        return [];
    }
    return [arr];
}
exports.toArray = toArray;
function convertMeta(meta) {
    for (let key of ["page", "perPage", "total", "totalPages", "from", "to", "index", "accepted", "ignored"]) {
        if (meta.hasOwnProperty(key)) {
            meta[key] = toInt(meta[key]); // eslint-disable-line
        }
    }
    for (let key of ["artistcorrected", "trackcorrected"]) {
        if (meta.hasOwnProperty(key)) {
            meta[key] = (0, exports.toBool)(meta[key]); // eslint-disable-line
        }
    }
    return meta;
}
exports.convertMeta = convertMeta;
function convertSearch(res) {
    var _a;
    if (!res.meta) {
        res.meta = {};
    }
    delete res["opensearch:Query"]["#text"];
    res.meta.itemsPerPage = toInt(res["opensearch:itemsPerPage"]);
    delete res["opensearch:itemsPerPage"];
    res.meta.startIndex = toInt(res["opensearch:startIndex"]);
    delete res["opensearch:startIndex"];
    res.meta.totalResults = toInt(res["opensearch:totalResults"]);
    delete res["opensearch:totalResults"];
    res.meta.query = { ...res.meta.query, ...res["opensearch:Query"] };
    delete res["opensearch:Query"];
    if ((_a = res.meta.query) === null || _a === void 0 ? void 0 : _a.startPage) {
        res.meta.query.startPage = toInt(res.meta.query.startPage);
    }
    return res;
}
exports.convertSearch = convertSearch;
function convertSearchWithQuery(res) {
    res.meta;
    res.meta = res["@attr"];
    delete res["@attr"];
    res.meta.query = { for: res.meta.for };
    delete res.meta.for;
    return convertSearch(res);
}
exports.convertSearchWithQuery = convertSearchWithQuery;
function convertImage(img) {
    img.url = img["#text"];
    delete img["#text"];
    return img;
}
exports.convertImage = convertImage;
const convertImageArray = (img) => toArray(img).map(convertImage);
exports.convertImageArray = convertImageArray;
function entryIntConverter(e) {
    var _a;
    for (let key of ["playcount", "listeners", "tagcount", "userplaycount", "rank", "duration", "taggings", "reach", "bootstrap", "age", "count", "match"]) {
        if (e.hasOwnProperty(key)) {
            e[key] = toInt(e[key]); // eslint-disable-line
            continue;
        }
        if ((_a = e["@attr"]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty(key)) {
            e[key] = toInt(e["@attr"][key]); // eslint-disable-line
            delete e["@attr"];
        }
    }
    return e;
}
function entryStreamableConverter(e) {
    var _a, _b;
    if (e.hasOwnProperty("streamable")) {
        if (e.streamable.hasOwnProperty("fulltrack")) {
            e.streamable.isStreamable = (0, exports.toBool)(e.streamable["#text"]);
            delete e.streamable["#text"];
            e.streamable.fulltrack = (0, exports.toBool)(e.streamable.fulltrack);
        }
        else {
            e.streamable = (0, exports.toBool)((_b = (_a = e.streamable) === null || _a === void 0 ? void 0 : _a["#text"]) !== null && _b !== void 0 ? _b : e.streamable);
        }
    }
    return e;
}
function convertEntry(e) {
    e = entryIntConverter(e);
    for (let key of ["ontour", "userloved", "subscriber", "loved"]) {
        if (e.hasOwnProperty(key)) {
            e[key] = (0, exports.toBool)(e[key]); // eslint-disable-line
        }
    }
    e = entryStreamableConverter(e);
    if (e.hasOwnProperty("image")) {
        e.image = (0, exports.convertImageArray)(e.image);
    }
    return e;
}
exports.convertEntry = convertEntry;
const convertEntryArray = (e) => toArray(e).map(convertEntry);
exports.convertEntryArray = convertEntryArray;
function setName(e) {
    var _a;
    if (!e.artist.hasOwnProperty("name")) {
        e.artist.name = e.artist["#text"];
        delete e.artist["#text"];
    }
    if (e.hasOwnProperty("album")) {
        (_a = e.album).name || (_a.name = e.album["#text"]);
        delete e.album["#text"];
    }
    return e;
}
function setDate(e, prop) {
    var _a;
    if (e.hasOwnProperty(prop)) {
        e[prop].datetime = e[prop]["#text"]; // eslint-disable-line
        delete e[prop]["#text"]; // eslint-disable-line
        e[prop].uts = toInt((_a = e[prop].uts) !== null && _a !== void 0 ? _a : e[prop].unixtime); // eslint-disable-line
        delete e[prop].unixtime; // eslint-disable-line
    }
    return e;
}
exports.setDate = setDate;
function convertGetRecentTracksEntry(e) {
    var _a;
    e = setName(e);
    e = setDate(e, "date");
    if ((_a = e === null || e === void 0 ? void 0 : e["@attr"]) === null || _a === void 0 ? void 0 : _a.hasOwnProperty("nowplaying")) {
        e.nowplaying = (0, exports.toBool)(e["@attr"].nowplaying);
        delete e["@attr"];
    }
    else {
        e.nowplaying = false;
    }
    return convertEntry(e);
}
const convertGetRecentTracks = (e) => toArray(e).map(convertGetRecentTracksEntry);
exports.convertGetRecentTracks = convertGetRecentTracks;
const joinArray = (e) => Array.isArray(e) ? e.join(",") : e;
exports.joinArray = joinArray;
function convertBasicMetaTag(res) {
    res.meta = res["@attr"];
    delete res["@attr"];
    res.tags = toArray(res.tag);
    delete res.tag;
    return res;
}
exports.convertBasicMetaTag = convertBasicMetaTag;
function convertExtendedMeta(res, type) {
    res.meta = convertMeta(res["@attr"]);
    delete res["@attr"];
    res[`${type}s`] = (0, exports.convertEntryArray)(res[type]); // eslint-disable-line
    delete res[type]; // eslint-disable-line
    return res;
}
exports.convertExtendedMeta = convertExtendedMeta;
function addConditionals(req, props) {
    for (let [key, value] of Object.entries(props)) {
        if (value !== void 0) {
            req[key] = value;
        }
    }
    return req;
}
exports.addConditionals = addConditionals;
function convertString(str, name, props) {
    if (typeof str !== "string") {
        return str;
    }
    let obj = {};
    obj[name] = str;
    return addConditionals(obj, props);
}
exports.convertString = convertString;
//# sourceMappingURL=caster.js.map