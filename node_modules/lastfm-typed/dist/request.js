"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LFMRequest = void 0;
const querystring_1 = require("querystring");
const crypto = __importStar(require("crypto"));
const caster_1 = require("./caster");
const cross_fetch_1 = __importDefault(require("cross-fetch"));
class LFMRequest {
    constructor(info, userAgent, secureConnection, params) {
        var _a, _b;
        this.key = info.key;
        this.params = Object.fromEntries(Object.entries(params).filter((e) => e[1] !== void 0 && e[1] !== null));
        this.secret = info.secret;
        this.userAgent = userAgent;
        this.connectionType = secureConnection ? "https" : "http";
        this.context = info.context;
        this.startTime = Date.now();
        if (this.params.hasOwnProperty("autocorrect")) {
            this.params.autocorrect = (0, caster_1.boolToInt)((_a = this.params.autocorrect) !== null && _a !== void 0 ? _a : true);
        }
        if (this.params.hasOwnProperty("recenttracks")) {
            this.params.recenttracks = (0, caster_1.boolToInt)((_b = this.params.recenttracks) !== null && _b !== void 0 ? _b : true);
        }
        if (this.params.hasOwnProperty("usernameOrSessionKey")) {
            this.params.user = this.params.usernameOrSessionKey;
            delete this.params.usernameOrSessionKey;
        }
    }
    async execute() {
        const isPostRequest = this.isPostRequest();
        this.context.logger.emitRequest(this.params, isPostRequest ? "POST" : "GET");
        if (isPostRequest) {
            if (this.secret === "") {
                throw new SyntaxError("Please enter an api secret key to use post requests with session key.");
            }
            this.startTime = Date.now();
            this.response = await this.post();
        }
        else {
            this.startTime = Date.now();
            this.response = await this.get();
        }
        return {
            res: await this.checkStatus(),
            time: Date.now() - this.startTime
        };
    }
    async checkStatus() {
        //request errors
        if (!this.response.ok) {
            const response = await this.response.json();
            if (typeof response === "object" && response !== null && response.hasOwnProperty("error") && response.hasOwnProperty("message")) {
                throw {
                    code: response.error,
                    message: response.message
                };
            }
            else {
                throw {
                    message: this.response.statusText,
                    response
                };
            }
        }
        try {
            this.response = await this.response.json();
        }
        catch (err) {
            throw new Error("Returned invalid json! Most likely a Last.FM issue.");
        }
        //lastfm errors
        if (this.response.hasOwnProperty("error")) {
            let error = {
                message: this.response.message,
                code: this.response.error
            };
            throw error;
        }
        //successful request
        return this.response;
    }
    async post() {
        if (this.params.hasOwnProperty("user")) {
            this.params.sk = this.params.user;
            delete this.params.user;
        }
        if (this.params.hasOwnProperty("username")) {
            this.params.sk = this.params.username;
            delete this.params.username;
        }
        const api_sig = this.getSignature();
        const requestParam = {
            ...this.params,
            api_key: this.key,
            format: "json",
            api_sig
        };
        const paramString = (0, querystring_1.stringify)(requestParam);
        return await (0, cross_fetch_1.default)(`${this.connectionType}://ws.audioscrobbler.com/2.0/`, {
            method: "POST",
            headers: {
                "Content-Length": Buffer.byteLength(paramString).toString(),
                "Content-Type": "application/x-www-form-urlencoded",
                "User-Agent": this.userAgent
            },
            body: paramString
        });
    }
    async get() {
        const params = {
            api_key: this.key,
            format: "json",
            ...this.params
        };
        return await (0, cross_fetch_1.default)(`${this.connectionType}://ws.audioscrobbler.com/2.0?${(0, querystring_1.stringify)(params)}`, {
            method: "GET",
            headers: {
                "User-Agent": this.userAgent
            }
        });
    }
    getSignature() {
        const paramObj = {
            ...this.params,
            api_key: this.key
        };
        const args = Object.keys(paramObj).sort().map((e) => [e, paramObj[e]]);
        let sig = args.reduce((acc, cur) => `${acc}${cur[0]}${cur[1]}`, "");
        sig = crypto.createHash("md5").update(sig + this.secret).digest("hex");
        return sig;
    }
    isPostRequest() {
        var _a, _b;
        return ((_a = this.params.user) === null || _a === void 0 ? void 0 : _a.length) === 32 || ((_b = this.params.username) === null || _b === void 0 ? void 0 : _b.length) === 32 || this.params.hasOwnProperty("sk") || this.params.hasOwnProperty("token") || this.params.hasOwnProperty("password");
    }
}
exports.LFMRequest = LFMRequest;
//# sourceMappingURL=request.js.map