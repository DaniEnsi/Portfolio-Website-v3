import {
  __commonJS
} from "./chunk-S5KM4IGW.js";

// node_modules/@eggsydev/vue-lanyard/src/constants.js
var require_constants = __commonJS({
  "node_modules/@eggsydev/vue-lanyard/src/constants.js"(exports, module) {
    module.exports = {
      apiBase: "https://api.lanyard.rest/v1",
      webSocketBase: "wss://api.lanyard.rest/socket"
    };
  }
});

// node_modules/@eggsydev/vue-lanyard/src/functions/lanyard.js
var { apiBase, webSocketBase } = require_constants();
async function Lanyard(options) {
  const supportsWebSocket = "WebSocket" in window || "MozWebSocket" in window;
  if (options.socket === true && supportsWebSocket === false)
    throw new Error("Browser doesn't support WebSocket connections.");
  if (!options || Object.keys(options).length === 0)
    throw new Error("No options were provided.");
  else if (options.userId === void 0)
    throw new Error("Missing `userId` option.");
  else if (options.socket === true) {
    const socket = new WebSocket(webSocketBase);
    let key = "subscribe_to_id";
    if (typeof options.userId === "object")
      key = "subscribe_to_ids";
    socket.addEventListener("open", () => {
      socket.send(
        JSON.stringify({
          op: 2,
          d: {
            [key]: options.userId
          }
        })
      );
      setInterval(() => {
        socket.send(
          JSON.stringify({
            op: 3
          })
        );
      }, 3e4);
    });
    return socket;
  } else if (typeof options.userId === "string") {
    const data = await fetch(`${apiBase}/users/${options.userId}`).then(
      (res) => res.json()
    );
    return data;
  } else if (typeof options.userId === "object") {
    const responseArray = [];
    for (let user of options.userId) {
      const data = await fetch(`${apiBase}/users/${user}`).then(
        (res) => res.json()
      );
      responseArray.push(data);
    }
    return responseArray;
  }
}

// node_modules/@eggsydev/vue-lanyard/src/index.js
var src_default = {
  install(Vue) {
    Vue.lanyard = Lanyard;
    Vue.prototype.$lanyard = Lanyard;
  }
};

// dep:@eggsydev_vue-lanyard
var eggsydev_vue_lanyard_default = src_default;
export {
  eggsydev_vue_lanyard_default as default
};
//# sourceMappingURL=@eggsydev_vue-lanyard.js.map
