"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = __importDefault(require("../base"));
const caster_1 = require("../caster");
class AlbumClass extends base_1.default {
    async addTags(firstInput, album, tags, sk) {
        firstInput = (0, caster_1.convertString)(firstInput, "artist", { album, tags, sk });
        firstInput.tags = (0, caster_1.joinArray)(firstInput.tags);
        return await this.sendRequest({ method: "album.addTags", ...firstInput });
    }
    async getInfo(firstInput, params) {
        var _a, _b;
        let res = (await this.sendRequest({ method: "album.getInfo", ...firstInput, ...params })).album;
        res = (0, caster_1.convertEntry)(res);
        res.tracks = (0, caster_1.convertEntryArray)((_a = res.tracks) === null || _a === void 0 ? void 0 : _a.track);
        res.tags = (0, caster_1.convertEntryArray)((_b = res.tags) === null || _b === void 0 ? void 0 : _b.tag);
        return res;
    }
    async getTags(firstInput, usernameOrSessionKey, params) {
        let req = (0, caster_1.addConditionals)({ ...firstInput, ...params }, { user: usernameOrSessionKey });
        let res = this.convertGetTags((await this.sendRequest({ method: "album.getTags", ...req })).tags);
        return (0, caster_1.convertBasicMetaTag)(res);
    }
    async getTopTags(firstInput, params) {
        let res = (await this.sendRequest({ method: "album.getTopTags", ...firstInput, ...params })).toptags;
        return (0, caster_1.convertBasicMetaTag)(res);
    }
    async removeTag(firstInput, album, tag, sk) {
        firstInput = (0, caster_1.convertString)(firstInput, "artist", { album, tag, sk });
        return await this.sendRequest({ method: "album.removeTag", ...firstInput });
    }
    async search(firstInput, params) {
        var _a;
        this.checkLimit((_a = params === null || params === void 0 ? void 0 : params.limit) !== null && _a !== void 0 ? _a : firstInput.limit, 1000);
        firstInput = (0, caster_1.convertString)(firstInput, "album", {});
        let res = (await this.sendRequest({ method: "album.search", ...firstInput, ...params })).results;
        res = (0, caster_1.convertSearchWithQuery)(res);
        res.albumMatches = (0, caster_1.convertEntryArray)(res.albummatches.album);
        delete res.albummatches;
        return res;
    }
}
exports.default = AlbumClass;
//# sourceMappingURL=album.js.map