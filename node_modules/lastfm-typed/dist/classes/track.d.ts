import * as TrackInterface from "../interfaces/trackInterface";
import Base from "../base";
import { TrackInput } from "../interfaces/shared";
export default class TrackClass extends Base {
    addTags(artist: string, track: string, tags: string[] | string, sk: string): Promise<{}>;
    addTags(input: TrackInterface.addTagsInput): Promise<{}>;
    getCorrection(artist: string, track: string): Promise<TrackInterface.getCorrection>;
    getCorrection(input: TrackInterface.BaseTrackInput): Promise<TrackInterface.getCorrection>;
    getInfo(track: TrackInput, params?: {
        autocorrect?: boolean;
        username?: string;
        sk?: string;
    }): Promise<TrackInterface.getInfo>;
    getInfo(input: TrackInterface.getInfoInput): Promise<TrackInterface.getInfo>;
    getSimilar(track: TrackInput, params?: {
        limit?: number;
        autocorrect?: boolean;
    }): Promise<TrackInterface.getSimilar>;
    getSimilar(input: TrackInterface.getSimilarInput): Promise<TrackInterface.getSimilar>;
    getTags(track: TrackInput, username: string, params?: {
        sk?: string;
        autocorrect?: boolean;
    }): Promise<TrackInterface.getTags>;
    getTags(input: TrackInterface.getInfoInput): Promise<TrackInterface.getTags>;
    getTopTags(track: TrackInput, params?: {
        autocorrect?: boolean;
    }): Promise<TrackInterface.getTopTags>;
    getTopTags(input: TrackInterface.getTagsInput): Promise<TrackInterface.getTopTags>;
    love(artist: string, track: string, sk: string): Promise<{}>;
    love(input: TrackInterface.PostTemplate): Promise<{}>;
    removeTag(artist: string, track: string, tag: string, sk: string): Promise<{}>;
    removeTag(input: TrackInterface.removeTagInput): Promise<{}>;
    scrobble(sk: string, scrobbles: TrackInterface.ScrobbleObject[]): Promise<TrackInterface.scrobble>;
    scrobble(input: TrackInterface.scrobbleInput): Promise<TrackInterface.scrobble>;
    search(track: string, params?: {
        limit?: number;
        page?: number;
        artist?: string;
    }): Promise<TrackInterface.search>;
    search(input: TrackInterface.searchInput): Promise<TrackInterface.search>;
    unlove(artist: string, track: string, sk: string): Promise<{}>;
    unlove(input: TrackInterface.PostTemplate): Promise<{}>;
    updateNowPlaying(artist: string, track: string, sk: string, params?: {
        album?: string;
        trackNumber?: number;
        mbid?: string;
        duration?: number;
        albumArtist?: string;
    }): Promise<{}>;
    updateNowPlaying(input: TrackInterface.updateNowPlayingInput): Promise<{}>;
}
